package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"errors"
	"fmt"

	"github.com/barretodotcom/graphql-redis-todolist/graph/model"
	"github.com/barretodotcom/graphql-redis-todolist/middleware"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	userID := middleware.GetUserID(ctx)

	if userID == "" {
		return nil, errors.New("Unauthorized")
	}

	return r.TodoService.CreateTodo(input, userID)
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	user, err := r.UserService.CreateUser(input.Username, input.Password)
	if err != nil {
		return nil, err
	}

	return user, nil
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, input model.DeleteTodo) (bool, error) {
	userID := middleware.GetUserID(ctx)

	if userID == "" {
		return false, errors.New("Unauthorized")
	}

	return r.TodoService.DeleteTodoById(input.ID, userID)
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.Login) (string, error) {
	return r.UserService.AuthUser(input)
}

// User is the resolver for the User field.
func (r *queryResolver) User(ctx context.Context) ([]*model.User, error) {
	return r.UserService.FindUsers()
}

// Todo is the resolver for the Todo field.
func (r *queryResolver) Todo(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todo - Todo"))
}

// GetUserByID is the resolver for the getUserById field.
func (r *queryResolver) GetUserByID(ctx context.Context, id string) (*model.User, error) {
	return r.UserService.FindUserById(id)
}

// Todos is the resolver for the todos field.
func (r *userResolver) Todos(ctx context.Context, obj *model.User) ([]*model.Todo, error) {
	return r.TodoService.FindTodosByUserId(obj.ID)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *todoResolver) StartDate(ctx context.Context, obj *model.Todo) (string, error) {
	panic(fmt.Errorf("not implemented: StartDate - startDate"))
}
func (r *todoResolver) EndDate(ctx context.Context, obj *model.Todo) (string, error) {
	panic(fmt.Errorf("not implemented: EndDate - endDate"))
}

type todoResolver struct{ *Resolver }

func (r *todoResolver) Title(ctx context.Context, obj *model.Todo) (string, error) {
	panic(fmt.Errorf("not implemented: Title - title"))
}
func (r *mutationResolver) GetUserByID(ctx context.Context, id string) (*model.User, error) {
	user, err := r.UserService.FindUserById(id)
	if err != nil {
		return nil, err
	}
	return user, nil
}
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}
